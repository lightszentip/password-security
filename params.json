{"name":"Password-security","tagline":"A module that encrypt and encode passwords. It also generate fake passwords.","body":"# README #\r\n\r\n## Getting Started ##\r\n\r\nIf you use maven, you need a maven build from the project. Then you can use the following dependency:\r\n\r\n    <groupId>com.lightszentip.module</groupId>\r\n\t<artifactId>password-security</artifactId>\r\n\t<version>1.0.0-RELEASE</version>\r\n\r\n## Use it ##\r\n**First**\r\n\r\nCreate a new instance of \"PasswordModule\":\r\n\r\n    public PasswordModuleImpl(String secretId, String secretSaltPw, String secureSaltKey, EncryptionType typeEncrypt, AlgorithmType typeEncod, int randomPasswordLength) {\r\n\r\n> secretId - Salt value for encryption and encoding\r\n> secretSaltPw - Salt value for password encoding\r\n> secureSaltKey - Salt value for encryption\r\n> typeEncrypt - Type for encryption\r\n> typeEncod - Type for encoding\r\n> randomPasswordLength - Length for fake passwords (honeywords)\r\n\r\n**Second**\r\n    \r\nThis function generate a random password:\r\n\r\n    public String generateRandomPassword(int length);\r\n\r\nThis function generate a password with encryption and encoding:\r\n    \r\n    public String getCodePassword(String password)\r\n\r\nThis function generate a password with encryption and encoding and fake passwords:\r\n\r\n    public String[] getHoneyPasswordList(String password, int size)\r\n\r\nThis function checks, is the variable password the right password. For this you need the whole list from  \"getHoneyPasswordList\":\r\n\r\n    checkPassword(String[] passwordArray, String password)\r\n\r\nIf you want to encryption other values, you can use the following functions:\r\n\r\n    public String encrypt(String value, String key, EncryptionType type);\r\n    public String decrypt(String value, String key, EncryptionType type);\r\n\r\n**Example**\r\n\r\n    PasswordModule passwordEncoder = new PasswordModuleImpl(\"secretid\", \"salt\", \"ThisIsaSaltValue\", EncryptionType.AES, AlgorithmType.SHA_512, 20);\r\n    String[] passwordArray = passwordEncoder.getHoneyPasswordList(\"test\", values);\r\n    Assert.assertTrue(passwordEncoder.checkPassword(passwordArray, passwordEncoder.getCodePassword(\"test\")));\r\n\r\n## java.security.InvalidKeyException: Illegal key size or default parameters ##\r\n\r\nIf you get the exception, then you need to download \"Java Cryptography Extension (JCE) Unlimited Strength Jurisdiction Policy Files\".","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}